#!/usr/bin/env ruby

trap("SIGINT") { exit! }

require 'rubygems'
require 'yaml'
require 'net/http'
require 'openssl'

source_path = File.dirname(__dir__)
$:.unshift(source_path)

type = ARGV[0]

abort("I can scan for 'hardware' or 'software'.") unless type =~ /^(hardware|software)$/

glob = case type
  when 'hardware'
    File.join(source_path, 'data', 'hardware', '*.yml')
  when 'software'
    File.join(source_path, 'data', 'software', '*.yml')
  end

puts "Scanning:"

Dir.glob(glob) do |path|
  data = YAML::load_file(path)
  needs_update = false

  begin
    print "- #{data['name']}: "

    url = URI(data['url'])
    response = Net::HTTP.get_response(url)
    
    case response
      when Net::HTTPSuccess then
        puts "Okay."
      when Net::HTTPMovedPermanently, Net::HTTPMovedTemporarily, Net::HTTPRedirection then
        new_url = response['location']

        if new_url =~ /jsessionid/
          puts "Looks like a session URL (#{new_url})."
        else
          new_url = "#{url.scheme}://#{url.host}#{new_url}" unless new_url =~ /^https?:\/\//

          data['url'] = new_url
          needs_update = true

          puts "Updated (#{response.code})."
        end
      when Net::HTTPNotFound then
        data['url'] = "FIX ME: Not found (#{data['url']})"
        needs_update = true

        puts "Not found."
      else
        data['url'] = "FIX ME: Got a #{response.code} (#{data['url']})"
        needs_update = true

        puts "Got a #{response.code}"
    end

  rescue Net::ReadTimeout, Errno::ETIMEDOUT, Errno::ENETUNREACH
    data['url'] = "FIX ME: Timed out or unreachable (#{data['url']})"
    needs_update = true

    puts "Timed out."
  rescue URI::InvalidURIError
    puts "Looks like a bad URL (#{data['url']})?"
  rescue OpenSSL::SSL::SSLError
    puts "Invalid SSL certificate."
  rescue SocketError
    data['url'] = "FIX ME: Dead site? (#{data['url']})"
    needs_update = true

    puts "Site seems unreachable."
  rescue Exception => e
    puts e.inspect
  end

  if needs_update
    File.open(path, 'w') do |file|
      file.write(YAML::dump(data))
    end
  end
end